/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fomerca.view;

import dto.Cliente;
import dto.Producto;
import facade.UserSessionBean;
import facade.local.UserSessionBeanLocal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Adonis
 */
public class VentanaConfiguracionCliente extends javax.swing.JFrame {

    private UserSessionBeanLocal userSessionBeanLocal = new UserSessionBean();
    private List<Cliente> clientes = userSessionBeanLocal.getClientes(null);
    private Cliente cliente;
    private boolean isFactura;
    private VentanaVentas ventanaVentas;

    public VentanaVentas getVentanaVentas() {
        return ventanaVentas;
    }

    public void setVentanaVentas(VentanaVentas ventanaVentas) {
        this.ventanaVentas = ventanaVentas;
    }

    public boolean isIsFactura() {
        return isFactura;
    }

    public void setIsFactura(boolean isFactura) {
        this.isFactura = isFactura;
    }

    /**
     * Creates new form VentanaConfiguracionCliente
     */
    public VentanaConfiguracionCliente() {
        initComponents();
        setLocationRelativeTo(null);
        JLabel label = new JLabel();
        label.setIcon(new ImageIcon(getClass().getResource("/resource/fondo_constante.jpg")));
        label.setAlignmentX(this.getAlignmentX());
        label.setAlignmentY(this.getAlignmentY());
        label.setSize(this.getSize());
        this.add(label);

        textFieldFechaNacimiento.setToolTipText("Formato: dia-mes-año(completo), ejemplo: 08-05-1995");

        String[] stringClientes = userSessionBeanLocal.listaLabelsClientes(null);

        listaClientes.setListData(stringClientes);
        listaClientes.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                cliente = clientes.get(listaClientes.getSelectedIndex());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textFieldNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textFieldApellido = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaDireccion = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        textFieldFechaNacimiento = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        textFieldCedula = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaClientes = new javax.swing.JList<>();
        buttonAgregar = new javax.swing.JButton();
        buttonEditar = new javax.swing.JButton();
        buttonEliminar = new javax.swing.JButton();
        buttonVolver = new javax.swing.JButton();
        buttonLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Registrar Clientes");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Apellido:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Cédula:");

        textAreaDireccion.setColumns(20);
        textAreaDireccion.setRows(5);
        jScrollPane1.setViewportView(textAreaDireccion);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Dirección:");

        textFieldFechaNacimiento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Fecha nacimiento:");

        textFieldCedula.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        listaClientes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listaClientes);

        buttonAgregar.setBackground(new java.awt.Color(102, 0, 0));
        buttonAgregar.setForeground(new java.awt.Color(255, 255, 255));
        buttonAgregar.setText("Agregar");
        buttonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarActionPerformed(evt);
            }
        });

        buttonEditar.setBackground(new java.awt.Color(102, 0, 0));
        buttonEditar.setForeground(new java.awt.Color(255, 255, 255));
        buttonEditar.setText("Editar");
        buttonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditarActionPerformed(evt);
            }
        });

        buttonEliminar.setBackground(new java.awt.Color(102, 0, 0));
        buttonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        buttonEliminar.setText("Eliminar");
        buttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEliminarActionPerformed(evt);
            }
        });

        buttonVolver.setBackground(new java.awt.Color(102, 0, 0));
        buttonVolver.setForeground(new java.awt.Color(255, 255, 255));
        buttonVolver.setText("Volver");
        buttonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVolverActionPerformed(evt);
            }
        });

        buttonLimpiar.setBackground(new java.awt.Color(102, 0, 0));
        buttonLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        buttonLimpiar.setText("Limpiar");
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldNombre))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(24, 24, 24))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldApellido)
                                    .addComponent(textFieldCedula)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textFieldFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonVolver)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(textFieldCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(6, 6, 6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAgregar)
                    .addComponent(buttonEditar)
                    .addComponent(buttonEliminar)
                    .addComponent(buttonVolver)
                    .addComponent(buttonLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarActionPerformed
        if (textFieldNombre.getText() != null && !textFieldNombre.getText().equals("")
                && textFieldApellido.getText() != null && !textFieldApellido.getText().equals("")
                && textFieldCedula.getText() != null && !textFieldCedula.getText().equals("")) {
            if (userSessionBeanLocal.getClienteByCedula(Integer.parseInt(textFieldCedula.getText())) == null) {
                if (Integer.parseInt(textFieldCedula.getText()) > 0) {
                    if (cliente != null) {
                        if (JOptionPane.showConfirmDialog(null, "Desea EDITAR este cliente? \n"
                                + textFieldNombre.getText() + " " + textFieldApellido.getText()
                                + "\nCédula: " + textFieldCedula.getText() + " ") == 0) {
                            try {
                                cliente.setNombre(textFieldNombre.getText());
                                cliente.setApellido(textFieldApellido.getText());
                                cliente.setCedula(Integer.parseInt(textFieldCedula.getText()));
                                cliente.setActivo(Boolean.TRUE);
                                cliente.setDireccion(textAreaDireccion.getText());
                                if (textFieldFechaNacimiento.getText() != null && !textFieldFechaNacimiento.getText().equals("")) {
                                    cliente.setFechaNacimiento(new SimpleDateFormat("dd-MM-yyyy").parse(textFieldFechaNacimiento.getText()));
                                }
                                userSessionBeanLocal.saveCliente(cliente);
                                recargar();
                            } catch (ParseException ex) {
                                Logger.getLogger(VentanaConfiguracionCliente.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    } else {
                        if (JOptionPane.showConfirmDialog(null, "Desea guardar este NUEVO cliente? \n"
                                + textFieldNombre.getText() + " " + textFieldApellido.getText() + " "
                                + "\nCédula: " + textFieldCedula.getText() + "") == 0) {
                            try {
                                Cliente newCliente = new Cliente();
                                newCliente.setNombre(textFieldNombre.getText());
                                newCliente.setActivo(Boolean.TRUE);
                                newCliente.setApellido(textFieldApellido.getText());
                                newCliente.setCedula(Integer.parseInt(textFieldCedula.getText()));
                                newCliente.setDireccion(textAreaDireccion.getText());
                                if (textFieldFechaNacimiento.getText() != null && !textFieldFechaNacimiento.getText().equals("")) {
                                    newCliente.setFechaNacimiento(new SimpleDateFormat("dd-MM-yyyy").parse(textFieldFechaNacimiento.getText()));
                                }
                                userSessionBeanLocal.saveCliente(newCliente);
                                recargar();
                            } catch (ParseException ex) {
                                Logger.getLogger(VentanaConfiguracionCliente.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Cedula debe ser mayor a 1");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El cliente ya existe.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Todos los campos deben estar llenos.");
        }
    }//GEN-LAST:event_buttonAgregarActionPerformed

    private void buttonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditarActionPerformed
        if (cliente != null) {
            textAreaDireccion.setText(cliente.getDireccion());
            textFieldNombre.setText(cliente.getNombre());
            textFieldApellido.setText(cliente.getApellido());
            textFieldCedula.setText(cliente.getCedula().toString());
            if (cliente.getFechaNacimiento() != null) {
                textFieldFechaNacimiento.setText(new SimpleDateFormat("dd-MM-yyyy").format(cliente.getFechaNacimiento()));
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente.");
        }
    }//GEN-LAST:event_buttonEditarActionPerformed

    private void buttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEliminarActionPerformed
        if (cliente != null) {
            if (JOptionPane.showConfirmDialog(null, "Esta seguro que desea eliminar este producto?."
                    + "\n" + cliente.getNombre()
                    + " " + cliente.getApellido()
                    + "\n Cédula: " + cliente.getCedula().toString()) == 0) {
                cliente.setActivo(Boolean.FALSE);
                userSessionBeanLocal.saveCliente(cliente);
                recargar();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un producto.");
        }
    }//GEN-LAST:event_buttonEliminarActionPerformed

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
        cliente = null;
        textAreaDireccion.setText(null);
        textFieldNombre.setText(null);
        textFieldApellido.setText(null);
        textFieldFechaNacimiento.setText(null);
        textFieldCedula.setText(null);
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void buttonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVolverActionPerformed
        if (isFactura) {
            if (ventanaVentas != null) {
                ventanaVentas.recargar();
            }
            this.setVisible(false);
        } else {
            VentanaMenu ventanaMenu = new VentanaMenu();
            ventanaMenu.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_buttonVolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracionCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracionCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracionCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracionCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaConfiguracionCliente().setVisible(true);
            }
        });
    }

    private void recargar() {
        VentanaConfiguracionCliente ventanaConfiguracionCliente
                = new VentanaConfiguracionCliente();
        ventanaConfiguracionCliente.setIsFactura(isFactura);
        ventanaConfiguracionCliente.setVentanaVentas(ventanaVentas);
        ventanaConfiguracionCliente.setVisible(true);
        this.setVisible(false);
        try {
            finalize();
        } catch (Throwable ex) {
            Logger.getLogger(VentanaConfiguracionProductos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAgregar;
    private javax.swing.JButton buttonEditar;
    private javax.swing.JButton buttonEliminar;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JButton buttonVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listaClientes;
    private javax.swing.JTextArea textAreaDireccion;
    private javax.swing.JTextField textFieldApellido;
    private javax.swing.JFormattedTextField textFieldCedula;
    private javax.swing.JFormattedTextField textFieldFechaNacimiento;
    private javax.swing.JTextField textFieldNombre;
    // End of variables declaration//GEN-END:variables
}
